# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# network_analysis_jc_ks.py
# Created on: 2017-05-09 09:02:49.00000
#   (generated by ArcGIS/ModelBuilder)
# Usage: network_analysis_jc_ks <Input_Stop_Locations> <Filter_Stop_Locations> <Choose_Route_Network_Dataset> <Impedance_Attribute> <Restrictions> <Accumulators> <Output_Path_Shape> <U_Turn_Policy> <Use_Hierarchy_in_Analysis> <Field_Mappings> <Sort_Field> <Group_By_Fields> 
# Description: 
# ---------------------------------------------------------------------------

# Import arcpy module
import arcpy

PROJECT_DIR = "C:/temp/RegionalTransitDatabase/"

ntwrk_path = PROJECT_DIR + "data/TomTom_2015_12_NW.gdb/Routing/Routing_ND"

#network args
ntwrk_args = {"network_dataset":ntwrk_path,
"impedance_attribute":"miles",
"u_turn_policy":"allow_uturns",
"restrictions":"'avoid walkways';'driving a public bus'", 
"accumulators":"miles;minutes", 
"output_path_shape":"true_lines_without_measures", 
"use_hierarchy_in_analysis":"true"}

def load_network(ntwrk_name, **kwargs):
    print(kwargs["network_dataset"])
    arcpy.MakeRouteLayer_na(kwargs["network_dataset"], ntwrk_name, 
        kwargs["impedance_attribute"], "use_input_order", "preserve_both", 
        "no_timewindows", kwargs["accumulators"], kwargs["u_turn_policy"], 
        kwargs["restrictions"], kwargs["use_hierarchy_in_analysis"], "", kwargs["output_path_shape"], "")
    return ntwrk_name

load_network("N1",**ntwrk_args)


#stop arguments
stop_args = {"restrictions" : "'avoid walkways';'driving a public bus'",
            "group_by_fields" : "agency_route_id", 
            "sort_field" : "stop_sequence",
            "field_mappings": "name agency_route_id #;routename agency_route_id #",
            "solve_succeeded" : "false",
            "child_data_element" : "routes",
            #hhts_trips__2_ = network_analyst_layer,
            "hhts_trips" : "empty_fc",
            "stop_locations" : PROJECT_DIR + "data/network_analyst.gdb/route_pattern_bus_stops"}

def load_stops(ntwrk_name,mtcgis_agency_route_pattern,**kwargs):
    #mtcgis_agency_route_pattern_id is a legacy id that mtc uses to uniquely identify routes and stops
    import re
    route_shortname = re.sub("\W","", mtcgis_agency_route_pattern)
    route_filter = "Agency_Route_Pattern =" + mtcgis_agency_route_pattern
    arcpy.MakeFeatureLayer_management(in_features=kwargs["stop_locations"], 
        out_layer=route_shortname, 
        where_clause=route_filter, 
        workspace="")
    arcpy.na.AddLocations(in_network_analysis_layer=ntwrk_name,
                     sub_layer="Stops",
                     in_table=route_shortname,
                     field_mappings=kwargs["field_mappings"],
                     search_tolerance="5000 Meters",
                     sort_field=kwargs["sort_field"],
                     search_criteria="Streets SHAPE;Routing_ND_Junctions NONE",
                     match_type="MATCH_TO_CLOSEST",
                     append="APPEND",
                     snap_to_position_along_network="NO_SNAP",
                     snap_offset="5 Meters",
                     exclude_restricted_elements="INCLUDE",
                     search_query="Streets #;Routing_ND_Junctions #")
    return route_shortname

route_name = "'AC - 1 - Outbound'"
network_name = "N2"
load_network(network_name,**ntwrk_args)
load_stops(network_name, route_name, **stop_args)


#arguments
class bus_route(object):
    '''
    br = bus_route("'AC - 1 - Inbound'")
    >> 
    >> br.stops_tempfile
    array of stop ids 
    >> br.tomtom_segment_ids
    array of tomtom segment id's 
    '''

    #layer paths
    #network data set must be loaded into an MXD Table of contents from catalog. 
    # see https://github.com/MetropolitanTransportationCommission/RegionalTransitDatabase/issues/16 for more


    def __init__(self, routename_id):


    # Process: Iterate Feature Selection
    # arcpy.IterateFeatureSelection_mb(Output_Layer, Group_By_Fields, "false")

    # Replace a layer/table view name with a path to a dataset (which can be a layer file) or create the layer/table view within the script
    # The following inputs are layers or table views: "Routing_ND"

    # Process: Make Route Layer


    # Process: Add Locations


    # Replace a layer/table view name with a path to a dataset (which can be a layer file) or create the layer/table view within the script
    # The following inputs are layers or table views: "R1"

    # Process: Solve
    arcpy.Solve_na(Network_Analyst_Layer, "SKIP", "TERMINATE", "")

# # Process: Select Data
# arcpy.SelectData_management(Network_Analyst_Layer, Child_Data_Element)

# # Process: Append
# arcpy.Append_management("Route\\Routes", HHTS_Trips, "NO_TEST", "", "")

